/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages_dashboard_reviewer_screens_three_jsx"],{

/***/ "./pages/dashboard/reviewer/screens/three.jsx":
/*!****************************************************!*\
  !*** ./pages/dashboard/reviewer/screens/three.jsx ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// // import { OpenAI } from \"langchain/llms/openai\";\n// // import { FaissStore } from \"langchain/vectorstores/faiss\";\n// // import { OpenAIEmbeddings } from \"langchain/embeddings/openai\";\n// // import { loadQAStuffChain, loadQAMapReduceChain } from \"langchain/chains\";\n// // import express from 'express'\n// // import http from 'http'\n// // import { fileURLToPath } from \"url\";\n// // import path, {dirname} from 'path';\n// // import * as dotenv from 'dotenv'\n// // dotenv.config()\n// // const __filename = fileURLToPath(import.meta.url);\n// // const __dirname = dirname(__filename);\n// // const app = express();\n// // const port = 3000;\n// // /* Create HTTP server */\n// // http.createServer(app).listen(process.env.PORT)\n// // console.info('listening on port ' + process.env.PORT)\n// // app.listen(port, () => {\n// //   console.log(`Server is running on port ${port}`);\n// // });\n// // /* Get endpoint to check current status  */\n// // app.get('/api/health', async (req, res) => {\n// //   res.json({\n// //     success: true,\n// //     message: 'Server is healthy',\n// //   })\n// // })\n// // app.get('/ask', async (req, res) => {\n// //     try {\n// //         const llmA = new OpenAI({ modelName: \"gpt-3.5-turbo\"});\n// //         const chainA = loadQAStuffChain(llmA);\n// //         const directory = process.env.DIR //saved directory in .env file\n// //         const loadedVectorStore = await FaissStore.load(\n// //           directory,\n// //           new OpenAIEmbeddings()\n// //           );\n// //           const question = \"what is this article about?\"; //question goes here. \n// //           const result = await loadedVectorStore.similaritySearch(question, 1);\n// //           const resA = await chainA.call({\n// //             input_documents: result,\n// //             question,\n// //           });\n// //           // console.log({ resA });\n// //           res.json({ result: resA }); // Send the response as JSON\n// //     } \n// //       catch (error) {\n// //       console.error(error);\n// //       res.status(500).json({ error: 'Internal Server Error' }); // Send an error response\n// //     }\n// //   });\n// import { OpenAI } from \"@langchain/openai\";\n// import { FaissStore } from \"@langchain/community/vectorstores/faiss\";\n// // import { OpenAIEmbeddings } from \"@langchain/openai\";\n// import { OpenAIEmbeddings } from \"@langchain/openai\";\n// import { loadQAStuffChain, loadQAMapReduceChain } from \"langchain/chains\";\n// import express from 'express'\n// import http from 'http'\n// import { fileURLToPath } from \"url\";\n// import path, {dirname} from 'path';\n// dotenv.config()\n// import * as dotenv from 'dotenv'\n// const __filename = fileURLToPath(import.meta.url);\n// const __dirname = dirname(__filename);\n// const app = express();\n// const port = 3000;\n// /* Create HTTP server */\n// http.createServer(app).listen(process.env.PORT)\n// console.info('listening on port ' + process.env.PORT)\n// app.listen(port, () => {\n//   console.log(`Server is running on port ${port}`);\n// });\n// /* Get endpoint to check current status  */\n// app.get('/api/health', async (req, res) => {\n//   res.json({\n//     success: true,\n//     message: 'Server is healthy',\n//   })\n// })\n// app.get('/ask', async (req, res) => {\n//     try {\n//         const llmA = new OpenAI({ modelName: \"gpt-3.5-turbo\"});\n//         const chainA = loadQAStuffChain(llmA);\n//         const directory = process.env.DIR //saved directory in .env file\n//         const loadedVectorStore = await FaissStore.load(\n//           directory,\n//           new OpenAIEmbeddings()\n//           );\n//           const question = \"what type of knowlegd i can get from this atricle whatever it is?\"; //question goes here. \n//           const result = await loadedVectorStore.similaritySearch(question, 1);\n//           const resA = await chainA.call({\n//             input_documents: result,\n//             question,\n//           });\n//           // console.log({ resA });\n//           res.json({ result: resA }); // Send the response as JSON\n//     } \n//       catch (error) {\n//       console.error(error);\n//       res.status(500).json({ error: 'Internal Server Error' }); // Send an error response\n//     }\n//   });\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9kYXNoYm9hcmQvcmV2aWV3ZXIvc2NyZWVucy90aHJlZS5qc3giLCJtYXBwaW5ncyI6IkFBQUEscURBQXFEO0FBQ3JELGdFQUFnRTtBQUNoRSxxRUFBcUU7QUFDckUsZ0ZBQWdGO0FBRWhGLG1DQUFtQztBQUNuQyw2QkFBNkI7QUFDN0IsMENBQTBDO0FBQzFDLHlDQUF5QztBQUN6QyxzQ0FBc0M7QUFDdEMscUJBQXFCO0FBQ3JCLHdEQUF3RDtBQUN4RCw0Q0FBNEM7QUFDNUMsNEJBQTRCO0FBQzVCLHdCQUF3QjtBQUV4Qiw4QkFBOEI7QUFDOUIscURBQXFEO0FBQ3JELDJEQUEyRDtBQUUzRCw4QkFBOEI7QUFDOUIseURBQXlEO0FBQ3pELFNBQVM7QUFFVCxpREFBaUQ7QUFDakQsa0RBQWtEO0FBQ2xELGtCQUFrQjtBQUNsQix3QkFBd0I7QUFDeEIsdUNBQXVDO0FBQ3ZDLFVBQVU7QUFDVixRQUFRO0FBRVIsMkNBQTJDO0FBQzNDLGVBQWU7QUFFZixxRUFBcUU7QUFDckUsb0RBQW9EO0FBQ3BELDhFQUE4RTtBQUU5RSw4REFBOEQ7QUFDOUQsMEJBQTBCO0FBQzFCLHNDQUFzQztBQUN0QyxrQkFBa0I7QUFFbEIsc0ZBQXNGO0FBQ3RGLHFGQUFxRjtBQUNyRixnREFBZ0Q7QUFDaEQsMENBQTBDO0FBQzFDLDJCQUEyQjtBQUMzQixtQkFBbUI7QUFDbkIseUNBQXlDO0FBQ3pDLHdFQUF3RTtBQUN4RSxZQUFZO0FBRVosMkJBQTJCO0FBQzNCLGlDQUFpQztBQUNqQywrRkFBK0Y7QUFDL0YsV0FBVztBQUNYLFdBQVc7QUFHWCw4Q0FBOEM7QUFDOUMsd0VBQXdFO0FBQ3hFLDJEQUEyRDtBQUMzRCx3REFBd0Q7QUFDeEQsNkVBQTZFO0FBRTdFLGdDQUFnQztBQUNoQywwQkFBMEI7QUFDMUIsdUNBQXVDO0FBQ3ZDLHNDQUFzQztBQUN0QyxrQkFBa0I7QUFDbEIsbUNBQW1DO0FBRW5DLHFEQUFxRDtBQUNyRCx5Q0FBeUM7QUFDekMseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUVyQiwyQkFBMkI7QUFDM0Isa0RBQWtEO0FBQ2xELHdEQUF3RDtBQUV4RCwyQkFBMkI7QUFDM0Isc0RBQXNEO0FBQ3RELE1BQU07QUFFTiw4Q0FBOEM7QUFDOUMsK0NBQStDO0FBQy9DLGVBQWU7QUFDZixxQkFBcUI7QUFDckIsb0NBQW9DO0FBQ3BDLE9BQU87QUFDUCxLQUFLO0FBRUwsd0NBQXdDO0FBQ3hDLFlBQVk7QUFFWixrRUFBa0U7QUFDbEUsaURBQWlEO0FBQ2pELDJFQUEyRTtBQUUzRSwyREFBMkQ7QUFDM0QsdUJBQXVCO0FBQ3ZCLG1DQUFtQztBQUNuQyxlQUFlO0FBRWYseUhBQXlIO0FBQ3pILGtGQUFrRjtBQUNsRiw2Q0FBNkM7QUFDN0MsdUNBQXVDO0FBQ3ZDLHdCQUF3QjtBQUN4QixnQkFBZ0I7QUFDaEIsc0NBQXNDO0FBQ3RDLHFFQUFxRTtBQUNyRSxTQUFTO0FBRVQsd0JBQXdCO0FBQ3hCLDhCQUE4QjtBQUM5Qiw0RkFBNEY7QUFDNUYsUUFBUTtBQUNSLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvZGFzaGJvYXJkL3Jldmlld2VyL3NjcmVlbnMvdGhyZWUuanN4PzMzMjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gLy8gaW1wb3J0IHsgT3BlbkFJIH0gZnJvbSBcImxhbmdjaGFpbi9sbG1zL29wZW5haVwiO1xyXG4vLyAvLyBpbXBvcnQgeyBGYWlzc1N0b3JlIH0gZnJvbSBcImxhbmdjaGFpbi92ZWN0b3JzdG9yZXMvZmFpc3NcIjtcclxuLy8gLy8gaW1wb3J0IHsgT3BlbkFJRW1iZWRkaW5ncyB9IGZyb20gXCJsYW5nY2hhaW4vZW1iZWRkaW5ncy9vcGVuYWlcIjtcclxuLy8gLy8gaW1wb3J0IHsgbG9hZFFBU3R1ZmZDaGFpbiwgbG9hZFFBTWFwUmVkdWNlQ2hhaW4gfSBmcm9tIFwibGFuZ2NoYWluL2NoYWluc1wiO1xyXG5cclxuLy8gLy8gaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcydcclxuLy8gLy8gaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCdcclxuLy8gLy8gaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gXCJ1cmxcIjtcclxuLy8gLy8gaW1wb3J0IHBhdGgsIHtkaXJuYW1lfSBmcm9tICdwYXRoJztcclxuLy8gLy8gaW1wb3J0ICogYXMgZG90ZW52IGZyb20gJ2RvdGVudidcclxuLy8gLy8gZG90ZW52LmNvbmZpZygpXHJcbi8vIC8vIGNvbnN0IF9fZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XHJcbi8vIC8vIGNvbnN0IF9fZGlybmFtZSA9IGRpcm5hbWUoX19maWxlbmFtZSk7XHJcbi8vIC8vIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuLy8gLy8gY29uc3QgcG9ydCA9IDMwMDA7XHJcblxyXG4vLyAvLyAvKiBDcmVhdGUgSFRUUCBzZXJ2ZXIgKi9cclxuLy8gLy8gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKS5saXN0ZW4ocHJvY2Vzcy5lbnYuUE9SVClcclxuLy8gLy8gY29uc29sZS5pbmZvKCdsaXN0ZW5pbmcgb24gcG9ydCAnICsgcHJvY2Vzcy5lbnYuUE9SVClcclxuXHJcbi8vIC8vIGFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xyXG4vLyAvLyAgIGNvbnNvbGUubG9nKGBTZXJ2ZXIgaXMgcnVubmluZyBvbiBwb3J0ICR7cG9ydH1gKTtcclxuLy8gLy8gfSk7XHJcblxyXG4vLyAvLyAvKiBHZXQgZW5kcG9pbnQgdG8gY2hlY2sgY3VycmVudCBzdGF0dXMgICovXHJcbi8vIC8vIGFwcC5nZXQoJy9hcGkvaGVhbHRoJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbi8vIC8vICAgcmVzLmpzb24oe1xyXG4vLyAvLyAgICAgc3VjY2VzczogdHJ1ZSxcclxuLy8gLy8gICAgIG1lc3NhZ2U6ICdTZXJ2ZXIgaXMgaGVhbHRoeScsXHJcbi8vIC8vICAgfSlcclxuLy8gLy8gfSlcclxuXHJcbi8vIC8vIGFwcC5nZXQoJy9hc2snLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuLy8gLy8gICAgIHRyeSB7XHJcbiAgXHJcbi8vIC8vICAgICAgICAgY29uc3QgbGxtQSA9IG5ldyBPcGVuQUkoeyBtb2RlbE5hbWU6IFwiZ3B0LTMuNS10dXJib1wifSk7XHJcbi8vIC8vICAgICAgICAgY29uc3QgY2hhaW5BID0gbG9hZFFBU3R1ZmZDaGFpbihsbG1BKTtcclxuLy8gLy8gICAgICAgICBjb25zdCBkaXJlY3RvcnkgPSBwcm9jZXNzLmVudi5ESVIgLy9zYXZlZCBkaXJlY3RvcnkgaW4gLmVudiBmaWxlXHJcbiAgICAgICAgXHJcbi8vIC8vICAgICAgICAgY29uc3QgbG9hZGVkVmVjdG9yU3RvcmUgPSBhd2FpdCBGYWlzc1N0b3JlLmxvYWQoXHJcbi8vIC8vICAgICAgICAgICBkaXJlY3RvcnksXHJcbi8vIC8vICAgICAgICAgICBuZXcgT3BlbkFJRW1iZWRkaW5ncygpXHJcbi8vIC8vICAgICAgICAgICApO1xyXG4gICAgICAgICAgXHJcbi8vIC8vICAgICAgICAgICBjb25zdCBxdWVzdGlvbiA9IFwid2hhdCBpcyB0aGlzIGFydGljbGUgYWJvdXQ/XCI7IC8vcXVlc3Rpb24gZ29lcyBoZXJlLiBcclxuLy8gLy8gICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGxvYWRlZFZlY3RvclN0b3JlLnNpbWlsYXJpdHlTZWFyY2gocXVlc3Rpb24sIDEpO1xyXG4vLyAvLyAgICAgICAgICAgY29uc3QgcmVzQSA9IGF3YWl0IGNoYWluQS5jYWxsKHtcclxuLy8gLy8gICAgICAgICAgICAgaW5wdXRfZG9jdW1lbnRzOiByZXN1bHQsXHJcbi8vIC8vICAgICAgICAgICAgIHF1ZXN0aW9uLFxyXG4vLyAvLyAgICAgICAgICAgfSk7XHJcbi8vIC8vICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh7IHJlc0EgfSk7XHJcbi8vIC8vICAgICAgICAgICByZXMuanNvbih7IHJlc3VsdDogcmVzQSB9KTsgLy8gU2VuZCB0aGUgcmVzcG9uc2UgYXMgSlNPTlxyXG4vLyAvLyAgICAgfSBcclxuICAgICAgXHJcbi8vIC8vICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4vLyAvLyAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuLy8gLy8gICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0ludGVybmFsIFNlcnZlciBFcnJvcicgfSk7IC8vIFNlbmQgYW4gZXJyb3IgcmVzcG9uc2VcclxuLy8gLy8gICAgIH1cclxuLy8gLy8gICB9KTtcclxuXHJcblxyXG4vLyBpbXBvcnQgeyBPcGVuQUkgfSBmcm9tIFwiQGxhbmdjaGFpbi9vcGVuYWlcIjtcclxuLy8gaW1wb3J0IHsgRmFpc3NTdG9yZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvbW11bml0eS92ZWN0b3JzdG9yZXMvZmFpc3NcIjtcclxuLy8gLy8gaW1wb3J0IHsgT3BlbkFJRW1iZWRkaW5ncyB9IGZyb20gXCJAbGFuZ2NoYWluL29wZW5haVwiO1xyXG4vLyBpbXBvcnQgeyBPcGVuQUlFbWJlZGRpbmdzIH0gZnJvbSBcIkBsYW5nY2hhaW4vb3BlbmFpXCI7XHJcbi8vIGltcG9ydCB7IGxvYWRRQVN0dWZmQ2hhaW4sIGxvYWRRQU1hcFJlZHVjZUNoYWluIH0gZnJvbSBcImxhbmdjaGFpbi9jaGFpbnNcIjtcclxuXHJcbi8vIGltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXHJcbi8vIGltcG9ydCBodHRwIGZyb20gJ2h0dHAnXHJcbi8vIGltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tIFwidXJsXCI7XHJcbi8vIGltcG9ydCBwYXRoLCB7ZGlybmFtZX0gZnJvbSAncGF0aCc7XHJcbi8vIGRvdGVudi5jb25maWcoKVxyXG4vLyBpbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSAnZG90ZW52J1xyXG5cclxuLy8gY29uc3QgX19maWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKTtcclxuLy8gY29uc3QgX19kaXJuYW1lID0gZGlybmFtZShfX2ZpbGVuYW1lKTtcclxuLy8gY29uc3QgYXBwID0gZXhwcmVzcygpO1xyXG4vLyBjb25zdCBwb3J0ID0gMzAwMDtcclxuXHJcbi8vIC8qIENyZWF0ZSBIVFRQIHNlcnZlciAqL1xyXG4vLyBodHRwLmNyZWF0ZVNlcnZlcihhcHApLmxpc3Rlbihwcm9jZXNzLmVudi5QT1JUKVxyXG4vLyBjb25zb2xlLmluZm8oJ2xpc3RlbmluZyBvbiBwb3J0ICcgKyBwcm9jZXNzLmVudi5QT1JUKVxyXG5cclxuLy8gYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XHJcbi8vICAgY29uc29sZS5sb2coYFNlcnZlciBpcyBydW5uaW5nIG9uIHBvcnQgJHtwb3J0fWApO1xyXG4vLyB9KTtcclxuXHJcbi8vIC8qIEdldCBlbmRwb2ludCB0byBjaGVjayBjdXJyZW50IHN0YXR1cyAgKi9cclxuLy8gYXBwLmdldCgnL2FwaS9oZWFsdGgnLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuLy8gICByZXMuanNvbih7XHJcbi8vICAgICBzdWNjZXNzOiB0cnVlLFxyXG4vLyAgICAgbWVzc2FnZTogJ1NlcnZlciBpcyBoZWFsdGh5JyxcclxuLy8gICB9KVxyXG4vLyB9KVxyXG5cclxuLy8gYXBwLmdldCgnL2FzaycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4vLyAgICAgdHJ5IHtcclxuICBcclxuLy8gICAgICAgICBjb25zdCBsbG1BID0gbmV3IE9wZW5BSSh7IG1vZGVsTmFtZTogXCJncHQtMy41LXR1cmJvXCJ9KTtcclxuLy8gICAgICAgICBjb25zdCBjaGFpbkEgPSBsb2FkUUFTdHVmZkNoYWluKGxsbUEpO1xyXG4vLyAgICAgICAgIGNvbnN0IGRpcmVjdG9yeSA9IHByb2Nlc3MuZW52LkRJUiAvL3NhdmVkIGRpcmVjdG9yeSBpbiAuZW52IGZpbGVcclxuICAgICAgICBcclxuLy8gICAgICAgICBjb25zdCBsb2FkZWRWZWN0b3JTdG9yZSA9IGF3YWl0IEZhaXNzU3RvcmUubG9hZChcclxuLy8gICAgICAgICAgIGRpcmVjdG9yeSxcclxuLy8gICAgICAgICAgIG5ldyBPcGVuQUlFbWJlZGRpbmdzKClcclxuLy8gICAgICAgICAgICk7XHJcbiAgICAgICAgICBcclxuLy8gICAgICAgICAgIGNvbnN0IHF1ZXN0aW9uID0gXCJ3aGF0IHR5cGUgb2Yga25vd2xlZ2QgaSBjYW4gZ2V0IGZyb20gdGhpcyBhdHJpY2xlIHdoYXRldmVyIGl0IGlzP1wiOyAvL3F1ZXN0aW9uIGdvZXMgaGVyZS4gXHJcbi8vICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBsb2FkZWRWZWN0b3JTdG9yZS5zaW1pbGFyaXR5U2VhcmNoKHF1ZXN0aW9uLCAxKTtcclxuLy8gICAgICAgICAgIGNvbnN0IHJlc0EgPSBhd2FpdCBjaGFpbkEuY2FsbCh7XHJcbi8vICAgICAgICAgICAgIGlucHV0X2RvY3VtZW50czogcmVzdWx0LFxyXG4vLyAgICAgICAgICAgICBxdWVzdGlvbixcclxuLy8gICAgICAgICAgIH0pO1xyXG4vLyAgICAgICAgICAgLy8gY29uc29sZS5sb2coeyByZXNBIH0pO1xyXG4vLyAgICAgICAgICAgcmVzLmpzb24oeyByZXN1bHQ6IHJlc0EgfSk7IC8vIFNlbmQgdGhlIHJlc3BvbnNlIGFzIEpTT05cclxuLy8gICAgIH0gXHJcbiAgICAgIFxyXG4vLyAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuLy8gICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbi8vICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InIH0pOyAvLyBTZW5kIGFuIGVycm9yIHJlc3BvbnNlXHJcbi8vICAgICB9XHJcbi8vICAgfSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/dashboard/reviewer/screens/three.jsx\n"));

/***/ })

}]);