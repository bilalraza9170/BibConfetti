/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "pages_dashboard_reviewer_screens_three_jsx";
exports.ids = ["pages_dashboard_reviewer_screens_three_jsx"];
exports.modules = {

/***/ "./pages/dashboard/reviewer/screens/three.jsx":
/*!****************************************************!*\
  !*** ./pages/dashboard/reviewer/screens/three.jsx ***!
  \****************************************************/
/***/ (() => {

eval("// // import { OpenAI } from \"langchain/llms/openai\";\n// // import { FaissStore } from \"langchain/vectorstores/faiss\";\n// // import { OpenAIEmbeddings } from \"langchain/embeddings/openai\";\n// // import { loadQAStuffChain, loadQAMapReduceChain } from \"langchain/chains\";\n// // import express from 'express'\n// // import http from 'http'\n// // import { fileURLToPath } from \"url\";\n// // import path, {dirname} from 'path';\n// // import * as dotenv from 'dotenv'\n// // dotenv.config()\n// // const __filename = fileURLToPath(import.meta.url);\n// // const __dirname = dirname(__filename);\n// // const app = express();\n// // const port = 3000;\n// // /* Create HTTP server */\n// // http.createServer(app).listen(process.env.PORT)\n// // console.info('listening on port ' + process.env.PORT)\n// // app.listen(port, () => {\n// //   console.log(`Server is running on port ${port}`);\n// // });\n// // /* Get endpoint to check current status  */\n// // app.get('/api/health', async (req, res) => {\n// //   res.json({\n// //     success: true,\n// //     message: 'Server is healthy',\n// //   })\n// // })\n// // app.get('/ask', async (req, res) => {\n// //     try {\n// //         const llmA = new OpenAI({ modelName: \"gpt-3.5-turbo\"});\n// //         const chainA = loadQAStuffChain(llmA);\n// //         const directory = process.env.DIR //saved directory in .env file\n// //         const loadedVectorStore = await FaissStore.load(\n// //           directory,\n// //           new OpenAIEmbeddings()\n// //           );\n// //           const question = \"what is this article about?\"; //question goes here. \n// //           const result = await loadedVectorStore.similaritySearch(question, 1);\n// //           const resA = await chainA.call({\n// //             input_documents: result,\n// //             question,\n// //           });\n// //           // console.log({ resA });\n// //           res.json({ result: resA }); // Send the response as JSON\n// //     } \n// //       catch (error) {\n// //       console.error(error);\n// //       res.status(500).json({ error: 'Internal Server Error' }); // Send an error response\n// //     }\n// //   });\n// import { OpenAI } from \"@langchain/openai\";\n// import { FaissStore } from \"@langchain/community/vectorstores/faiss\";\n// // import { OpenAIEmbeddings } from \"@langchain/openai\";\n// import { OpenAIEmbeddings } from \"@langchain/openai\";\n// import { loadQAStuffChain, loadQAMapReduceChain } from \"langchain/chains\";\n// import express from 'express'\n// import http from 'http'\n// import { fileURLToPath } from \"url\";\n// import path, {dirname} from 'path';\n// dotenv.config()\n// import * as dotenv from 'dotenv'\n// const __filename = fileURLToPath(import.meta.url);\n// const __dirname = dirname(__filename);\n// const app = express();\n// const port = 3000;\n// /* Create HTTP server */\n// http.createServer(app).listen(process.env.PORT)\n// console.info('listening on port ' + process.env.PORT)\n// app.listen(port, () => {\n//   console.log(`Server is running on port ${port}`);\n// });\n// /* Get endpoint to check current status  */\n// app.get('/api/health', async (req, res) => {\n//   res.json({\n//     success: true,\n//     message: 'Server is healthy',\n//   })\n// })\n// app.get('/ask', async (req, res) => {\n//     try {\n//         const llmA = new OpenAI({ modelName: \"gpt-3.5-turbo\"});\n//         const chainA = loadQAStuffChain(llmA);\n//         const directory = process.env.DIR //saved directory in .env file\n//         const loadedVectorStore = await FaissStore.load(\n//           directory,\n//           new OpenAIEmbeddings()\n//           );\n//           const question = \"what type of knowlegd i can get from this atricle whatever it is?\"; //question goes here. \n//           const result = await loadedVectorStore.similaritySearch(question, 1);\n//           const resA = await chainA.call({\n//             input_documents: result,\n//             question,\n//           });\n//           // console.log({ resA });\n//           res.json({ result: resA }); // Send the response as JSON\n//     } \n//       catch (error) {\n//       console.error(error);\n//       res.status(500).json({ error: 'Internal Server Error' }); // Send an error response\n//     }\n//   });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/dashboard/reviewer/screens/three.jsx\n");

/***/ })

};
;